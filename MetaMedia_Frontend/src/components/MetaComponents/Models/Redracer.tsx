// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Command: npx gltfjsx@6.2.16 public/Models/redracer.glb -t 
// */

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Ch20: THREE.SkinnedMesh
    mixamorig6Hips: THREE.Bone
  }
  materials: {
    Ch20_body: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

export function RedRacerModel({position}:any,props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('../../../../Models/redracer.glb') as GLTFResult
  return (
    <group {...props} position={[position.x,position.y,position.z]} dispose={null}>
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <primitive object={nodes.mixamorig6Hips} />
        <skinnedMesh geometry={nodes.Ch20.geometry} material={materials.Ch20_body} skeleton={nodes.Ch20.skeleton} />
      </group>
    </group>
  )
}

useGLTF.preload('../../../../Models/redracer.glb')



export default RedRacerModel




